Challenge - How many pages to scrape? Can scraping be in sync with the chat? it will slow user interface but how much

Challenge - What should be the limit of the medical content to cover? Just symptoms? or also treatments and other things? And how comprehensive should be the knowledge?  

Challenge - If condition is not specified in the scraping function, how can the relevant content be scraped still?

Challenge - Relevant content is scraped but its not comprehensive when condition is not specified - Pass url to LLM and have it decide the condition

Challenge - How to have the LLM get back and ask more questions to understand the situation?

Challenge - How to reduce hallucination? It is basically giving back some stuff not in the webpage.

Challenge - The current dataset is full of medical jargon and does not have answers to simple queries based on simple common diseases.

Challenge - Wouldn't a reasoning model be better for such an application? Well one part of it , maybe the initial part where the user just provided symptoms

Notes :

Start simple and build up complexity as necessary and optimize each part of the project
Along the way, understand what the aim of the project is, what is the scope
Develop a structure to solve the problem
* Categorization step
Testing/Evaluation stages during the project
Have LLM perform quick check on the output before sending to the user

Architecture keywords :
Retrieval(Query)
Tools
Memory

Prompt chaining : Breakdown problem into steps for the LLM to perform, pass each output to the next LLM call

Routing : Categorize incoming requests and use routers to control workflow going in a direction according to the category

Parallelization : Independent tasks performed by LLM and then aggregated

Evaluator-Optimizer : Have another LLM call review the output generated by LLM and feed back the original output and feedback again.

Agent pattern : the LLM iteratively gives itself feedback and performs actions until the end goal has been reached (No certain start or end point)


